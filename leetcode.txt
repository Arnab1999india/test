

1480. Running Sum of 1d Array

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].

Ans-

class Solution {
    public int[] runningSum(int[] nums) {
       
        int n=nums.length;
        int sum =0;
        for(int i=0;i<n-1;i++){
           sum = nums[i]+sum;
           nums[i+1]= nums[i+1]+sum;
           sum = sum-nums[i];
        }
        return nums;
    }
}

-----------------------------------------------------------------------------------------------------------------



2011. Final Value of Variable After Performing Operations

There is a programming language with only four operations and one variable X:

++X and X++ increments the value of the variable X by 1.
--X and X-- decrements the value of the variable X by 1.
Initially, the value of X is 0.

Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.

 

Example 1:

Input: operations = ["--X","X++","X++"]
Output: 1
Explanation: The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.
Example 2:

Input: operations = ["++X","++X","X++"]
Output: 3
Explanation: The operations are performed as follows:
Initially, X = 0.
++X: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
X++: X is incremented by 1, X = 2 + 1 = 3.


Ans-

class Solution {
    public int finalValueAfterOperations(String[] operations) {
        
        int x=0;
        int n = operations.length;
        for(int i =0;i<n;i++){
          
            if(operations[i].equals("X++")){
                 x++;
             }
            if(operations[i].equals("X--")){
                 x--;
             }
             if(operations[i].equals("++X")){
                 x--;
             }
             if(operations[i].equals("--X")){
                 --x;
             }
                                            
        }
                return x;
    }
}

-------------------------------------------------------------------------------------------------------------------------

1512. Number of Good Pairs

Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.

Ans-

class Solution {
    public int numIdenticalPairs(int[] nums) {
       
        int n = nums.length;
        int good=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if((nums[i]==nums[j]) && i<j){
                  good++;  
                }
            }
        }
        return good;
    }
}


-------------------------------------------------------------------------------------------------------------------------


1672. Richest Customer Wealth

You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

 
Example 1:

Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
1st customer has wealth = 1 + 2 + 3 = 6
2nd customer has wealth = 3 + 2 + 1 = 6
Both customers are considered the richest with a wealth of 6 each, so return 6.
Example 2:

Input: accounts = [[1,5],[7,3],[3,5]]
Output: 10
Explanation: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.

Ans-

class Solution {
    public int maximumWealth(int[][] accounts) {
        
        int maxwealth= 0;
        int m = accounts.length;
        int n = accounts[0].length;
        for(int i =0;i<m;i++){
            int wealth=0;
            for(int j=0;j<n;j++){
                wealth = wealth+ accounts[i][j];
                
            }
            maxwealth = Math.max(maxwealth,wealth);
        }
        return maxwealth;
    }
}


------------------------------------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------



